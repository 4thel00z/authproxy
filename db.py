# AUTOGENERATED FROM:
#     'queries/roles/create_role.edgeql'
#     'queries/tenants/create_tenant.edgeql'
#     'queries/users/create_user.edgeql'
#     'queries/users/get_user_by_email.edgeql'
#     'queries/users/get_user_by_username.edgeql'
# WITH:
#     $ edgedb-py --file db.py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateRoleResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreateTenantResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetUserByEmailResult(NoPydanticValidation):
    id: uuid.UUID
    username: str
    email: str
    first_name: str
    last_name: str
    password_hash: str
    disabled: bool
    roles: list[GetUserByEmailResultRolesItem]
    tenant: GetUserByEmailResultTenant


@dataclasses.dataclass
class GetUserByEmailResultRolesItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    scopes: list[str]


@dataclasses.dataclass
class GetUserByEmailResultTenant(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GetUserByUsernameResult(NoPydanticValidation):
    id: uuid.UUID
    username: str
    email: str
    first_name: str
    last_name: str
    password_hash: str
    disabled: bool
    tenant: GetUserByEmailResultTenant
    roles: list[GetUserByEmailResultRolesItem]


async def create_role(
    executor: edgedb.AsyncIOExecutor,
    *,
    tenant: str,
    scopes: list[str],
    tenant_name: str,
) -> CreateRoleResult:
    return await executor.query_single(
        """\
        INSERT Role {
        	name := <str>$tenant,
        	scopes := <array<str>>$scopes,
        	tenant := (SELECT Tenant FILTER Tenant.name = <str>$tenant_name),
        };\
        """,
        tenant=tenant,
        scopes=scopes,
        tenant_name=tenant_name,
    )


async def create_tenant(
    executor: edgedb.AsyncIOExecutor,
    *,
    tenant: str,
) -> CreateTenantResult:
    return await executor.query_single(
        """\
        INSERT Tenant {
        	name := <str>$tenant
        };\
        """,
        tenant=tenant,
    )


async def create_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    email: str,
    first_name: str,
    last_name: str,
    password_hash: str,
    tenant_name: str,
    roles: str,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        INSERT User {
          username := <str>$username,
          email := <str>$email,
          first_name := <str>$first_name,
          last_name := <str>$last_name,
          password_hash := <str>$password_hash,
          tenant := (SELECT Tenant FILTER Tenant.name = <str>$tenant_name),
          roles := (SELECT Role FILTER Role.tenant.name = <str>$tenant_name AND Role.name in <str>$roles)
        };\
        """,
        username=username,
        email=email,
        first_name=first_name,
        last_name=last_name,
        password_hash=password_hash,
        tenant_name=tenant_name,
        roles=roles,
    )


async def get_user_by_email(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
    tenant: str,
) -> GetUserByEmailResult | None:
    return await executor.query_single(
        """\
        SELECT User {
        	id,
        	username,
        	email,
        	first_name,
        	last_name,
        	password_hash,
        	disabled,
        	roles: { name, scopes},
        	tenant: { name }
        } FILTER .email = <str>$email AND .tenant.name = <str>$tenant LIMIT 1;\
        """,
        email=email,
        tenant=tenant,
    )


async def get_user_by_username(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    tenant: str,
) -> GetUserByUsernameResult | None:
    return await executor.query_single(
        """\
        SELECT User {
        	id,
        	username,
        	email,
        	first_name,
        	last_name,
        	password_hash,
        	disabled,
        	tenant: {
        	 name
        	},
        	roles: {
        	  name,
        	  scopes
        	}
        } FILTER .username = <str>$username AND .tenant.name = <str>$tenant LIMIT 1;\
        """,
        username=username,
        tenant=tenant,
    )
